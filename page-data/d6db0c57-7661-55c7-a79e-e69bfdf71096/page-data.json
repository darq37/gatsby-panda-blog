{"componentChunkName":"component---src-templates-blog-post-js","path":"/d6db0c57-7661-55c7-a79e-e69bfdf71096","result":{"data":{"mongodbPandaBasePosts":{"content":{"childMarkdownRemark":{"html":"<p><strong>Gatsby-panda-blog</strong><br> Aplikacja na zaliczenie przedmiotu Web Development<br> <strong>Omawiana Aplikacja</strong><br> Jest to Aplikacja blogowa, pozwalająca użytkownikowi na przeglądanie, komentowanie i dodawanie postów. Zbudowana  jako Single-Page Application oparty na frameworku Gatsby.<br> <strong>Gatsby</strong><br> Jest to darmowy, open-source framework bazowany na React.JS, pozwalający na budowanie szybkich i intuicyjnych aplikacji internetowych.<br> <strong>Struktura Aplikacji</strong><br> <img src=\"https://i.imgur.com/HS0F7PU.png\" alt=\"Struktura aplikacji\"><br> <strong>Components</strong><br> Podfolder, gdzie znajdują się komponenty Reacta, które nie są poszczególnymi stronami oraz pliki <em>.css</em>.<br> <strong>Images</strong><br> Miejsce na statyczne pliki z obrazami używanymi w aplikacji.<br> <strong>Pages</strong><br> Jedno z najważniejszych miejsc w strukturze aplikacji. Składowane są tu komponenty Reacta, które następnie są przedtwarzane na end-pointy w aplikacji.<br> <strong>Templates</strong><br> Subfolder mieszczący pliki, będące podstawą renderowania pojedyńczego posta na blogu.<br> <strong>Utils</strong><br> Miejsce na pliki dotyczące użytecznych wtyczek (w aplikacji używam typography, pomagającego stylizować komponenty).<br> <strong>Gasby-config.js</strong><br> Plik mieszczący wszelką konfiguracje aplikacji w Gatsby. To  z jego poziomu mamy dostęp do instalacji wtyczek, ich konfiguracji, zależności, mapowania obiektów.<br> <strong>Gatsby-node.js</strong><br> Plik pozwalający na używanie bogatego Gatsby-Node API, pozwalającego na m. in. proceduralne, dynamiczne tworzenie stron, dodawanie węzłów do GraphQL, używanego przez Gatsby,<br> <strong>Aplikacja</strong><br> Odpalanie aplikacji wymaga wpisania jednej komendy -  startuje ona wszelkie potrzebne moduły i buduje stronę.<br> <img src=\"https://i.imgur.com/uMXMCFs.png\" alt=\"enter image description here\"><br> Widok strony tytułowej to prosty ekran z wyświetlonymi wszystkimi postami, uszeregowanymi wg daty dodania:<br> <img src=\"https://i.imgur.com/MWlab47.png\" alt=\"enter image description here\"><br> Po kliknięciu na pojedyńczy post, przechodzimy do niego. Każdy z nich ma unikalny URL, oparty na jego ID w bazie danych.<br> <img src=\"https://i.imgur.com/KsYkZ0y.png\" alt=\"https://i.imgur.com/KsYkZ0y.png\"><br> Korzystam z bazy danych MongoDB. Umieszczone tam dane mają prostą strukturę: każdy rekord posiada własne ID oraz plik Markdown.<br> <img src=\"https://i.imgur.com/1aw4dOb.png\" alt=\"enter image description here\"><br> Pliki Markdown z bazy danych pobierane są poprzez plugin <strong>gatsby-source-mongodb</strong>.<br> Każdy post posiada sekcję komentarzy hostowaną przez serwis Disqus. Pozwala on na dodawanie i odczyt komentarzy, a także ich moderację i statystyki poprzez panel administratora.<br> Dodawanie nowych postó odbywa się poprzez dołączenie ich do bazy danych. Niestety nie udało mi się tego dobrze zaimplementować i na ten czas przycisk <strong>dodaj post</strong> powraca nas do strony głównej.</p> <p><strong>Kod aplikacji</strong><br> <em><strong>Strona główna</strong></em><br> <img src=\"https://i.imgur.com/P1fvqKX.png\" alt=\"enter image description here\"><img src=\"https://i.imgur.com/lr5zvBF.png\" alt=\"enter image description here\"><br> Gatsby pozwala na bardzo fajne użycie języka zapytań GraphQL w celu wyciągnięcia danych z bazy danych. Odpowiednie zapytanie wrzuca nam wszelkie dane do Reactowego props.data, skąd mamy do nich dostęp z poziomu aplikacji.<br> Strona tytułowa aplikacji zawiera tytuł, liczbę postów na stronie oraz listę poszczególnych postów będącą jednocześnie listą specjalnych komponentów Gatsby Link pozwalających na łatwe przemieszczanie się po stronie.  <strong>Link to = node. id</strong> przemieszcza nas do odpowiednich węzłów, w oparciu o ich id z bazy danych.</p> <p><strong>blog-post.js</strong><br> Plik bazowy, w oparciu o który opierają się wszystkie posty na stronie.<br> <img src=\"https://i.imgur.com/SCGfB0m.png\" alt=\"enter image description here\"><br> Ma on bardzo prostą budowę - w pojedyńczym divie jest tylko tytuł oraz kontent posta, wyciągnięty z bazy danych odpowiednim zapytaniem oraz Komponent Disquss, renderujący sekcję komentarzy.</p> <p><strong>Layout</strong><br> Jest to komponent mieszący się w podfolderze Components, <img src=\"https://i.imgur.com/wg6haKz.png\" alt=\"enter image description here\"><br> Jak inne komponenty w Gatsby, ma on własne zapytanie GraphQL, pozwalający na wyciągnięcie, tym razem, metadanych o stronie, zapisanych w pliku <em><strong>gatsby-config.js</strong></em>.<br> Komponent Layout odpowiada za renderowanie komponentów-dzieci pod sobą, oraz za pasek nawigacyjny strony.</p> <p><strong>Podsumowanie</strong><br> Jest to dość prosta aplikacja oparta na frameworku Gatsby, pozwalająca na odczytywanie, zapis postów blogowych do bazy danych. Kod aplikacji zamieszczam na githubie do przejrzenia. Strona została również umieszczona na GitHub Pages.<br> <a href=\"https://darq37.github.io/gatsby-panda-blog/\">Strona na GitHub Pages</a><br> <a href=\"https://github.com/darq37/gatsby-panda-blog\">Repozytorium na GitHubie</a></p>"}},"date":"2020-02-12T23:00:00.000Z","id":"d6db0c57-7661-55c7-a79e-e69bfdf71096","title":"Q&A","description":"Wyjaśnienie dzialania bloga"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"d6db0c57-7661-55c7-a79e-e69bfdf71096"}}}